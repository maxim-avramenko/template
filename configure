#!/usr/bin/env bash

#######################################################
# Application configuration script                    #
# create and update .env for docker-compose.yml files #
#######################################################

# executable check
type docker >/dev/null 2>&1 || { echo >&2 "I require docker but it's not installed.  Aborting."; exit 1; }
type docker-compose >/dev/null 2>&1 || { echo >&2 "I require docker-compose but it's not installed.  Aborting."; exit 1; }
type make >/dev/null 2>&1 || { echo >&2 "I require make but it's not installed.  Aborting."; exit 1; }
type getopt >/dev/null 2>&1 || { echo >&2 "I require getopt but it's not installed.  Aborting."; exit 1; }

# OS type [ Linux | Windows | Darwin ]
OS_TYPE="unknown"
if [[ `uname` == 'Linux' ]]; then
   OS_TYPE="Linux"
elif [[ `uname` == 'Darwin' ]]; then
   OS_TYPE="Darwin"
fi

if [ ${OS_TYPE} == "unknown" ]; then
    echo "I require Linux or Darwin OS but current type of OS is unknown.  Aborting."; exit 1;
fi

# environment variables and .env file path
APP_ENV="dev"
ENV="development"
ENV_FILE_PATH=".env"
PROJECT_PWD=${PWD}
PROJECT_NAME=${PWD##*/}
IMAGE_TAG="latest"

# user binaries path and list
USER_BINARIES_PATH=`systemd-path user-binaries`
USER_BINARIES=$(ls ${USER_BINARIES_PATH})

# docker folder and path
DOCKER_PWD=${PROJECT_PWD}

# script
SCRIPT_SOURCE=${DOCKER_PWD}"/bin/script"
SCRIPT_NAME=${PROJECT_NAME}
SCRIPT_INSTALL_PATH=""${USER_BINARIES_PATH}"/"${SCRIPT_NAME}""

# domain
DOMAIN=${PROJECT_NAME}".local"

# PHP xDebug remote_host ip config
DOCKER_HOST_IP=$(docker network inspect --format='{{range .IPAM.Config}}{{println .Gateway}}{{end}}' bridge)
XDEBUG_CONFIG="remote_host="${DOCKER_HOST_IP}
PHP_IDE_CONFIG="serverName="${PROJECT_NAME}".local"

# show help message function
help-message()
{
echo "
Usage: ./configure [OPTION]...

Create or update .env file for docker-compose.yml file with set of environment variables and values.

Mandatory arguments to long options are mandatory for short options too.
  -d, --debug                       run config in debug mode
  -D, --domain-name[=DOMAIN]        set new domain-name for project
                                    example: --domain-name=domain-name.local
                                             -Ddomain-name.local
                                    default: ${PROJECT_NAME}.local

  -E, --environment=[=APP_ENV]      set value for APP_ENV environment variable
                                    example: --environment=dev
                                             --environment=prod
                                    default: dev

  -h, --help                        show this help

  -P, --project-name[=PROJECT_NAME] set project name [PROJECT_NAME]
                                    example: -Nproject_name
                                    default: ${PROJECT_NAME}

  -S|--script-name[=SCRIPT_NAME]    set script-name

  -v|--verbose                      run config in verbose mode


Example of usage with long, short and no keys:

  ./configure                       with no keys will create .env file with
                                    default values in environment variables
                                    domain-name ${PROJECT_NAME}.local
                                    application environment = ${APP_ENV}
                                    project name = ${PROJECT_NAME}
                                    script name = ${SCRIPT_NAME}

  ./configure -Dsite.local \        create .env file with domain 'site.local'
              -Edev \               'dev' environment
              -Psite \              'site' project name
              -Ssite \              'site' script name
              -v                    and run configuration process in verbose

  ./configure -Dsite.local -Edev -Psite -Ssite -v

This is the same as above but with long keys:

  ./configure --domain-name=site.local --environment=dev --project-name=site --script-name=site --verbose

"
}

# create .enf file or get values from .enf file
if [ ! -f ${ENV_FILE_PATH} ]; then
    > ${ENV_FILE_PATH}
else
    . ./.env
fi

# http://bahmanm.com/blogs/command-line-options-how-to-parse-in-bash-using-getopt
# set long and short keys
OPTS=`getopt -o vdhS:P:D:E: --long verbose,debug,help,script-name:,project-name:,domain-name:,environment:,service-template:,service-name:,app-web-root:,config-template-name:,image-tag: -- "$@"`

if [ $? != 0 ] ; then echo "Failed parsing options." >&2 ; exit 1 ; fi

#echo "$OPTS"
eval set -- "${OPTS}"

while true; do
  case "$1" in
    -v|--verbose)
        set -v
        shift
    ;;
    -d|--debug)
        set -x
        shift
    ;;
    -h|--help)
        HELP=true
        shift
    ;;
    -S|--script-name)
        case "$2" in
            "")
                shift 2
            ;;
            *)
                SCRIPT_NAME=$2
                shift 2
            ;;
        esac
    ;;
    -P|--project-name)
        case "$2" in
            "")
                shift 2
            ;;
            *)
                PROJECT_NAME=$2
                shift 2
            ;;
        esac
    ;;
    -D|--domain-name)
        case "$2" in
            "")
                shift 2
            ;;
            *)
                DOMAIN=$2
                PHP_IDE_CONFIG=serverName=${DOMAIN}
                XDEBUG_CONFIG="remote_host="${DOCKER_HOST_IP}
                shift 2
            ;;
        esac
    ;;
    -E|--environment)
        case "$2" in
            "")
                shift 2
            ;;
            *)
                APP_ENV=$2
                shift 2
            ;;
        esac
    ;;
    --)
        shift
        PROCESS_LIST=("$@")
        #echo "PROCESS_LIST="${PROCESS_LIST[@]}
        break
    ;;
    *)
       break
    ;;
  esac
done

# запускаем команды поочереди, в том порядке в котором запросил пользователь
if [[ "${#PROCESS_LIST[@]}" > 0 ]]; then
    #echo "Команды запускаются по порядку как указано в команде запуска!"
    for i in "${PROCESS_LIST[@]}"
    do
        case "${i}" in
            help)
                help-message
                exit 0
            ;;
        esac
        #echo "Выполняем команду: ${i}"
        "${i}"
    done
else
    help-message
    exit 0
fi

exit 0
