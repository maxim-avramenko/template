#!/usr/bin/env bash
# ./configure
set -e
#######################################################
# Application configuration script                    #
# create and update .env for docker-compose.yml files #
#######################################################

# show help message function
help-message()
{
echo "
Usage: ./configure [OPTION]...

Create or update .env file for docker-compose.yml configuration.

Mandatory arguments to long options are mandatory for short options too.

  -d, --debug                       run config in debug mode

  -D, --domain-name[=DOMAIN]        set up new domain-name for application
                                    example: --domain-name=domain-name.local
                                             -Ddomain-name.local
                                    default: ${DOMAIN}

  -E, --environment=[=APP_ENV]      set up application environment variable
                                    example: --environment=dev
                                             --environment=prod
                                    default value: 'dev'

  -h, --help                        display this help and exit

  -l, --list-services               display list of all available docker services

  -N, --script-name[=SCRIPT_NAME]   set up script-name

  -P, --project-name[=PROJECT_NAME] set up project name [PROJECT_NAME]
                                    example: -Nproject_name
                                    default: ${PROJECT_NAME}

  -S, --services[=LIST]             list of required services for project
                                    --services=\"nginx php mysql traefik network\"
                                    use only this services in docker-compose

  -v, --verbose                     run config in verbose mode

  -X, --exclude-services[=LIST]     specify excluded list of services
                                    example: --exclude-services=\"portainer php\"
                                    services \"portainer php\" will be excluded
                                    Default: all services will be include


Example of usage with long, short and no keys:

  ./configure --list-services       display list of all available services

  ./configure                       with no keys will create .env file with
                                    default values in environment variables
                                    domain-name ${PROJECT_NAME}.local
                                    application environment = ${APP_ENV}
                                    project name = ${PROJECT_NAME}
                                    script name = ${SCRIPT_NAME}
                                    all services will be include to config

  ./configure -Dsite.local \        create .env file with domain 'site.local'
              -Edev \               'dev' environment
              -Psite \              'site' project name
              -Ssite \              'site' script name
              -X\"mysql traefik\"     without services mysql and traefik
              -v                    and run configuration process in verbose

This command is exactly the same as the previous one, but here we indicate the list of services we need: nginx php mysql traefik network

  ./configure -Dsite.local -Edev -Psite -Ssite -v --services=\"nginx php mysql traefik network\"

This is the same as above but with long keys and here we indicate the list of services we need to exclude:

  ./configure --domain-name=site.local --environment=dev --project-name=site --script-name=site --verbose --exclude-services=\"mysql portainer scope\"

"
}

# project path and folder name (current folder name is default project name)
PROJECT_PWD=${PWD}
PROJECT_NAME=${PWD##*/}

# docker and application folder and path
APP_FOLDER="app"
DOCKER_FOLDER="docker"
DOCKERFILE_FOLDER="dockerfile"
LOGS_FOLDER="logs"
SERVICE_FOLDER="service"
SCRIPT_SOURCE_FOLDER="bin"
SCRIPT_SOURCE_NAME="script"
CHECK_SCRIPT_NAME="check"

APP_PWD=${PROJECT_PWD}"/"${APP_FOLDER}
DOCKER_PWD=${PROJECT_PWD}"/"${DOCKER_FOLDER}
DOCKERFILE_PWD=${DOCKER_PWD}"/"${DOCKERFILE_FOLDER}
LOGS_PWD=${DOCKER_PWD}"/"${LOGS_FOLDER}
SERVICE_PWD=${DOCKER_PWD}"/"${SERVICE_FOLDER}
SCRIPT_SOURCE_PWD=${DOCKER_PWD}"/"${SCRIPT_SOURCE_FOLDER}
SCRIPT_SOURCE=${SCRIPT_SOURCE_PWD}"/"${SCRIPT_SOURCE_NAME}
CHECK_SCRIPT=${SCRIPT_SOURCE_PWD}"/"${CHECK_SCRIPT_NAME}

# additional software executable check
chmod +x ${CHECK_SCRIPT} && ${SHELL} ${CHECK_SCRIPT}

# environment variables and .env file path
APP_ENV="dev"
ENV="development"
ENV_FILE_PATH=".env"
IMAGE_TAG="latest"

# user binaries path where user store his apps
USER_BINARIES_PATH=`systemd-path user-binaries`
# list of user binaries applications
USER_BINARIES=$(ls ${USER_BINARIES_PATH})

# script
SCRIPT_NAME=${PROJECT_NAME}
SCRIPT_INSTALL_PATH=""${USER_BINARIES_PATH}"/"${SCRIPT_NAME}""

# domain
DOMAIN=${PROJECT_NAME}".local"

# PHP xDebug remote_host ip config
DOCKER_HOST_IP=$(docker network inspect --format='{{range .IPAM.Config}}{{println .Gateway}}{{end}}' bridge)
XDEBUG_CONFIG="remote_host="${DOCKER_HOST_IP}
PHP_IDE_CONFIG="serverName="${PROJECT_NAME}".local"

# list of all available services, this is a set of all available services for project docker-compose.yml configuration.
AVAILABLE_SERVICES=()

# project docker-compose services list, this is a set of services to run the project.
PROJECT_SERVICES=()

# excluded services from docker-compose config
EXCLUDED_SERVICES=()

# user service list
USER_SERVICES=()

# final service list for docker-compose config
SERVICE_LIST=()

# this function get list of available services from docker/service folder
get-available-services()
{
    for file in `ls ${SERVICE_PWD}`; do
        AVAILABLE_SERVICES=(${AVAILABLE_SERVICES[@]} $(echo $(basename "${file}") | sed 's/.yml//'))
    unset file
    done
}

echo-available-services()
{
    get-available-services
    echo
    echo "Available services: "${AVAILABLE_SERVICES[@]}
    echo
    echo "Example: ./configure [OPTIONS] --services=\"${AVAILABLE_SERVICES[1]} ${AVAILABLE_SERVICES[3]} ${AVAILABLE_SERVICES[5]}\""
}

#

# user name and user id
USER="${USER}"
USER_ID=`id -u "${USER}"`

# create .enf file or get values from .enf file
if [ ! -f ${ENV_FILE_PATH} ]; then
    > ${ENV_FILE_PATH}
else
#    cp ${ENV_FILE_PATH} ${ENV_FILE_PATH}.old
    . ./.env
fi

# удаление свойства по шаблону
#array0=( первый второй третий )
#array0=( "${array0[@]}" "новый1" "новый2")
#array0=( ${array0[@]/новый1/} )

# http://bahmanm.com/blogs/command-line-options-how-to-parse-in-bash-using-getopt
# set up long and short keys
OPTS=`getopt -o vdhN:P:D:E:l,X:S: --long verbose,debug,help,script-name:,project-name:,domain-name:,environment:,exclude-services:,available-services,services: -- "$@"`

if [ $? != 0 ] ; then echo "Failed parsing options." >&2 ; exit 1 ; fi

#echo "$OPTS"
eval set -- "${OPTS}"

while true; do
  case "$1" in
    -v|--verbose)
        set -v
        shift
    ;;
    -d|--debug)
        set -x
        shift
    ;;
    -h|--help)
        help-message
        shift
        exit 0
    ;;
    -l|--available-services)
        echo-available-services
        shift
        exit 0
    ;;
    -N|--script-name)
        case "$2" in
            "")
                shift 2
            ;;
            *)
                SCRIPT_NAME=$2
                shift 2
            ;;
        esac
    ;;
    -P|--project-name)
        case "$2" in
            "")
                shift 2
            ;;
            *)
                PROJECT_NAME=$2
                shift 2
            ;;
        esac
    ;;
    -D|--domain-name)
        case "$2" in
            "")
                shift 2
            ;;
            *)
                DOMAIN=$2
                PHP_IDE_CONFIG=serverName=${DOMAIN}
                XDEBUG_CONFIG="remote_host="${DOCKER_HOST_IP}
                shift 2
            ;;
        esac
    ;;
    -E|--environment)
        case "$2" in
            "")
                shift 2
            ;;
            *)
                APP_ENV=$2
                shift 2
            ;;
        esac
    ;;
    -X|--exclude-services)
        case "$2" in
            "")
                shift 2
            ;;
            *)
                EXCLUDED_SERVICES=($2)
                shift 2
            ;;
        esac
    ;;
    -S|--services)
        case "$2" in
            "")
                shift 2
            ;;
            *)
                USER_SERVICES=($2)
                shift 2
            ;;
        esac
    ;;
    --)
        shift
        PROCESS_LIST=("$@")
        break
    ;;
    *)
       break
    ;;
  esac
done

# recreate .env file with updated environment variables


# запускаем команды поочереди, в том порядке в котором запросил пользователь
if [[ "${#PROCESS_LIST[@]}" > 0 ]]; then
    for i in "${PROCESS_LIST[@]}"
    do
        case "${i}" in
            help)
                help-message
                exit 0
            ;;
        esac
        "${i}"
    done
else
    echo "Get more information and examples, run:"
    echo
    echo "      ./configure -h, --help, help"
    echo
    exit 0
fi

exit 0